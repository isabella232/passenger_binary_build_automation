#!/bin/bash
set -e
ROOTDIR=`dirname "$0"`
ROOTDIR=`cd "$ROOTDIR/.." && pwd`
DOCKER_IMAGE_MAJOR_VERSION=$(cat "$ROOTDIR/shared/definitions/docker_image_major_version")
source "$ROOTDIR/shared/lib/library.sh"

PASSENGER_DIR=
CACHE_DIR=
OUTPUT_DIR=
ARCHITECTURE=
CONCURRENCY=2

function usage()
{
	echo "Usage: ./compile-passenger [OPTIONS]"
	echo "Compile Passenger binaries."
	echo
	echo "Required options:"
	echo "  -p DIR     Path to Passenger source directory"
	echo "  -c DIR     Path to cache directory"
	echo "  -o DIR     Path in which to store build products"
	echo "  -a ARCH    Architecture to build for (x86, x86_64)"
	echo
	echo "Optional options:"
	echo "  -j NUM     Set build concurrency. Default: 2"
	echo
	echo "  -h         Show usage"
}

function parse_options()
{
	local OPTIND=1
	local opt
	while getopts "p:c:o:a:j:h" opt; do
		case "$opt" in
		p)
			PASSENGER_DIR="$OPTARG"
			;;
		c)
			CACHE_DIR="$OPTARG"
			;;
		o)
			OUTPUT_DIR="$OPTARG"
			;;
		a)
			ARCHITECTURE="$OPTARG"
			;;
		j)
			CONCURRENCY=$OPTARG
			;;
		t)
			SHOW_BACKTRACES=true
			;;
		h)
			usage
			exit
			;;
		*)
			return 1
			;;
		esac
	done

	if [[ "$PASSENGER_DIR" = "" ]]; then
		echo "ERROR: please specify a Passenger source directory with -p."
		exit 1
	fi
	if [[ ! -e "$PASSENGER_DIR" ]]; then
		echo "ERROR: $PASSENGER_DIR does not exist."
		exit 1
	fi
	if [[ "$CACHE_DIR" = "" ]]; then
		echo "ERROR: please specify a cache directory with -c."
		exit 1
	fi
	if [[ "$OUTPUT_DIR" = "" ]]; then
		echo "ERROR: please specify an output directory with -o."
		exit 1
	fi
	if [[ "$ARCHITECTURE" = "" ]]; then
		echo "ERROR: please specify an architecture with -a."
		exit 1
	fi
}

parse_options "$@"

if tty -s; then
	TTY_ARGS="-t -i"
else
	TTY_ARGS=
fi
if [[ "$ARCHITECTURE" = x86 ]]; then
	DOCKER_IMAGE=phusion/passenger_binary_build_automation_32
	LINUX32=linux32
else
	DOCKER_IMAGE=phusion/passenger_binary_build_automation_64
	LINUX32=
fi
PASSENGER_DIR="`absolute_path \"$PASSENGER_DIR\"`"
CACHE_DIR="`absolute_path \"$CACHE_DIR\"`"
OUTPUT_DIR="`absolute_path \"$OUTPUT_DIR\"`"

run mkdir -p "$CACHE_DIR"
run mkdir -p "$OUTPUT_DIR"

echo "-------- Entering Docker container --------"
exec docker run -t -i --rm \
	-v "$ROOTDIR:/system:ro" \
	-v "$PASSENGER_DIR:/passenger:ro" \
	-v "$CACHE_DIR:/cache" \
	-v "$OUTPUT_DIR:/output" \
	-e "CONCURRENCY=$CONCURRENCY" \
	$DOCKER_IMAGE:$DOCKER_IMAGE_MAJOR_VERSION \
	$LINUX32 /system/shared/compile-passenger/docker-entrypoint.sh
